#!/usr/bin/perl

use strict;

use Data::Dumper;
use JSON;

##########
# CONFIG #
##########
# ceph pool
my $POOL = $ENV{'NFSCEPH_POOL'} || "userfs";
# ceph user
my $USER = $ENV{'NFSCEPH_USER'} || "nfs";
# ceph keyfile
my $KEYRING = $ENV{'NFSCEPH_KEYRING'} || "/etc/ceph/ceph.keyring";
# exports will be mounted here
my $MOUNT = $ENV{'NFSCEPH_MOUNT'} || "/export";
# export config
my $EXPORTS = $ENV{'NFSCEPH_EXPORTS'} || "/etc/sysconfig/nfsceph-exports";
# export filesystem type(ext3/ext4/xfs)
my $FSTYPE = $ENV{'NFSCEPH_FSTYPE'} || "ext4";

if ($#ARGV < 0) { help(); }

my $command = shift;

if ($command eq "create") {
    my $name = shift;
    my $size = shift;
    if (defined($name) && defined($size)) {
        create($name, $size);
    }
    else {
        print "Error: $0 create <name> <size>\n";
    }
}
elsif ($command eq "delete") {
    my $name = shift;
    if (defined($name)) {
        remove($name);
    }
    else {
        print "Error: $0 delete <name>\n";
    }
}
elsif ($command eq "export") {
    my $o = shift;
    if ($o eq "-a") {
        exportall();
    }
    else {
        my $name = $o;
        my $ip = shift;
        export($name, $ip);
    }
}
elsif ($command eq "unexport") {
    my $name = shift;
    my $ip = shift;
    unexport($name, $ip);
}
elsif ($command eq "map") {
    my $name = shift;
    mapmount($name);
}
elsif ($command eq "unmap") {
    my $name = shift;
    unmapmount($name);
}
elsif ($command eq "mapall") {
    mapall();
}
elsif ($command eq "unmapall") {
    unmapall();
}
elsif ($command eq "list") {
    list();
}
elsif ($command eq "unlock") {
    _rbd_unlock(shift);
}
else {
    help();
}

# return 1 if rbd exists
sub rbd_exists {
    my $name = shift;
    my $rbds = decode_json(`rbd --format json --pool $POOL --id $USER --keyring $KEYRING ls`);
    foreach my $rbd (@{$rbds}) {
        if ($name eq $rbd) {
            return 1;
        }
    }
    return 0;
}

# returns a device mapped to rbd
sub getmapped {
    my $name = shift;
    my $json = `rbd --format json --pool $POOL --id $USER --keyring $KEYRING showmapped 2> /dev/null`;
    if ($json) {
        my $rbds = decode_json($json);
        foreach my $rbd (values %{$rbds}) {
            if ($name eq $rbd->{'name'}) {
                return $rbd->{'device'};
            }
        }
    }
    return undef;
}


sub list {
    my $ls = decode_json(`rbd --format json --pool $POOL --id $USER --keyring $KEYRING ls -l`);

    my $json = `rbd --format json --pool $POOL --id $USER --keyring $KEYRING showmapped 2> /dev/null`;

    # get list of all mount
    my $mounts;
    my $out = `mount | grep '^/dev/rbd'`;
    my @ms = split /\n/, $out;
    foreach my $m (@ms) {
        my @i = split / /,$m;
        $mounts->{$i[0]} = $i[2];
    }

    my $map;
    if ($json) {
        my $rbds = decode_json($json);
        foreach my $rbd (values %{$rbds}) {
            $map->{$rbd->{'name'}}->{'device'} = $rbd->{'device'};
            $map->{$rbd->{'name'}}->{'mount'} = $mounts->{$rbd->{'device'}};
        }
    }

    printf ("%-20s %-10s %s\n",'NAME','SIZE', 'MOUNT');
    printf ("%-20s %-10s %s\n",'----','----', '-----');
    foreach my $rbd (@{$ls}) {
        #print Dumper $rbd;
        my $name = $rbd->{'image'};
        my $size = $rbd->{'size'};
        $size = $size/1000000; # size is in bytes by default, which is so small
        my $u = "MB";
        if ($size > 1000000000) { $size = $size / 1000000000; $u = "PB"; }
        elsif ($size > 1000000) { $size = $size / 1000000; $u = "TB"; }
        elsif ($size > 1000) { $size = $size / 1000; $u = "GB"; }
        printf ("%-20s %6.2f $u  %s\n", $name, $size, $map->{$name}->{'mount'});
    }
    return 0;

}

sub create {
    my $name = shift;
    my $size = shift;

    if (rbd_exists($name)) {
        print "Error! rbd $name already exists.\n";
        exit;
    }

    print "Creating rbd... ";
    system("rbd --pool $POOL --id $USER --keyring $KEYRING create --size $size $name");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; exit 1; }

    print "Mapping rbd...";
    system("rbd --pool $POOL --id $USER --keyring $KEYRING map $name");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; exit 1; }

    print "Making $FSTYPE filesystem...";
    my $device = getmapped($name);
    system("mkfs.$FSTYPE $device");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; exit 1; }

    print "Mounting filesystem...";
    mkdir ("$MOUNT/$name");
    system("mount $device $MOUNT/$name");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; exit 1; }

    print "Unmounting filesystem...";
    system("umount $MOUNT/$name");
    rmdir("$MOUNT/$name");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; exit 1; }

    print "Unmapping rbd... ";
    system("rbd --pool $POOL --id $USER --keyring $KEYRING unmap $device");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; exit 1; }
}

sub remove {
    my $name = shift;

    my $print = _export_print($name);
    if (defined($print)) { print "Error! $name is still exported. Unexport resources before deleting.\n"; print $print; exit 3; }

    if (! rbd_exists($name)) {
        print "Error! rbd $name does not exist.\n";
        exit 1;
    }

    my $device = getmapped($name);
    if ($device) {
        print "Error! device $name is still mapped.\n";
    }

    print "Deleting rbd... ";
    system("rbd --pool $POOL --id $USER --keyring $KEYRING rm $name");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; exit 1; }
}


# map and mount
sub mapmount {
    my $name = shift;

    my $rv = _rbd_lock($name);
    if ($rv != 0) { exit 1; }

    print "Mapping rbd $name...";
    system("rbd --pool $POOL --id $USER --keyring $KEYRING map $name");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; return; }

    print "Mounting $FSTYPE filesystem $MOUNT/$name...";
    my $device = getmapped($name);
    if (! -d "$MOUNT") { mkdir ("$MOUNT", 755); }
    if (! -d "$MOUNT/$name") { mkdir ("$MOUNT/$name", 755); }
    system("mount -t $FSTYPE $device $MOUNT/$name");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; return; }
}

# unmap and umount
sub unmapmount {
    my $name = shift;
    my $device = getmapped($name);

    _rbd_unlock($name);

    if (!defined($device)) {
        print "Error! rbd $name does not have a mapped device.\n";
        print "Please delete rbd manually. See man rdb for more help.\n";
        return;
    }

    print "Unmounting filesystem $MOUNT/$name...";
    system("umount $MOUNT/$name");
    rmdir("$MOUNT/$name");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error. You might need to unexport NFS shares first.\n"; return; }

    print "Unmapping rbd $name...";
    system("rbd --pool $POOL --id $USER --keyring $KEYRING unmap $device");
    if ($? == 0) { print "Success.\n"; }
    else { print "Error.\n"; return; }
}

# adds an export if given $ip, print out list of exports if not
sub export {
    my $name = shift;
    my $ip = shift;
    if (!defined($ip)) {
        print _export_print($name);
        return;
    }
    system "exportfs -o rw,async,no_root_squash $ip:/export/$name";
    # saves the current exports
    system "cp -f /var/lib/nfs/etab /etc/exports"
}


# removes an export
sub unexport {
    my $name = shift;
    my $ip = shift;
    if (!defined($ip) || !defined($name)) { help(); exit 3; }
    system "exportfs -u $ip:/export/$name";
    # saves the current exports
    system "cp -f /var/lib/nfs/etab /etc/exports"
}

sub exportall {
    open(FILE, "< $EXPORTS");
    my @lines = <FILE>;
    foreach my $line (@lines) {
        my @vs = split(' ',$line);
        my $name = @vs[0];
        my $ip = @vs[1];
        print "Exporting $name... ";
        system "exportfs -o rw,async,no_root_squash $ip:/export/$name\n";
        if ($? == 0) { print "Success.\n"; }
        else { print "Error.\n"; }
    }
    close(FILE);
}

sub unexportall {
    open(FILE, "< $EXPORTS");
    my @lines = <FILE>;
    foreach my $line (@lines) {
        my @vs = split(' ',$line);
        my $name = @vs[0];
        my $ip = @vs[1];
        print "Unexporting $name... ";
        system "exportfs -u $ip:/export/$name\n";
        if ($? == 0) { print "Success.\n"; }
        else { print "Error.\n"; }
    }
    close(FILE);
}

sub mapall {
    open(FILE, "< /etc/exports");
    my @lines = <FILE>;
    foreach my $line (@lines) {
        my @vs = split(' ',$line);
        my $name = @vs[0];
        my $ip = @vs[1];
        my @rs = split('/',$name);
        my $rbd = @rs[2];
        if (! getmapped($rbd)) {
            mapmount($rbd);
        }
    }
    close(FILE);
}

sub unmapall {
    my $json = `rbd --format json --pool $POOL --id $USER --keyring $KEYRING showmapped 2> /dev/null`;
    if ($json) {
        my $maps = decode_json($json);
        foreach my $map (values %{$maps}) {
            unmapmount($map->{'name'});
        }
    }
}

# lock a image
sub _rbd_lock {
    my $rbd = shift;
    my $lock = decode_json(`rbd --format json --pool $POOL --id $USER --keyring $KEYRING lock list $rbd`);
    if (%{$lock}) {
        my $lockhost = (keys %{$lock})[0];
        warn "Error: image $rbd is already mapped by $lockhost\n";
        warn "Unmap it with unmap <rbd>\n";
        warn "It it is not mapped, there might be a stale lock. Force unlock it with unlock <rbd>\n";
        return -1;
    }
    else {
        my $hostname = `hostname`;
        system(`rbd --pool $POOL --id $USER --keyring $KEYRING lock add $rbd $hostname`);
        return 0;
    }
}

# unlock a image
sub _rbd_unlock {
    my $rbd = shift;
    my $lock = decode_json(`rbd --format json --pool $POOL --id $USER --keyring $KEYRING lock list $rbd`);
    if (%{$lock}) {
        my $hostname = `hostname`;
        chomp $hostname;
        my $id = $lock->{"$hostname"}->{'locker'};
        #print("rbd --pool $POOL --id $USER --keyring $KEYRING lock remove $rbd $hostname $id");
        system(`rbd --pool $POOL --id $USER --keyring $KEYRING lock remove $rbd $hostname $id`);
        return 0;
    }
    return -1;
}

# helper function to print out a list of exports 
sub _export_print {
    my $rbd = shift;
    open(FILE, "< /var/lib/nfs/etab");
    my @lines = <FILE>;
    @lines = sort @lines;
    my $print;
    foreach my $line (@lines) {
        if ($line !~ /^\/export\//) { next; }
        my @vs = split(' ',$line);
        my $name = @vs[0];
        my $ip = @vs[1];
        $name =~ s/^\/export\///;
        my $i = index($ip,'(');
        $ip = substr($ip, 0, $i);
        if (!defined ($rbd)) {
            $print .= "$name $ip\n";
        }
        elsif ($rbd eq $name) {
            $print .= "$name $ip\n";
        }
    }
    close(FILE);
    return $print;
}



sub help {
    print <<EOF
Usage:
    $0 <command> <name>

Command:
    create  <name> :
            Create a ceph block device, and export it via NFS

    delete  <name> :
            Delete the ceph block device and unexport it

    map  [name] :
            Maps and rbd and mounts it

    unmap  [name] :
            Umount and unmap rbd

    export [name] [ip / hostname] :
            Export ceph block device to IP or hostname

    unexport [name] [ip / hostname] :
            Unexport ceph block device to IP or hostname

    list
            Lists the ceph block devices

Examples:
    $0 create nfsdev 150
        Create a ceph block device with name nfsdev and size 150MB and export it
        via NFS
    $0 map nfsdev
        Map and mount nfsdev
    $0 export nfsdev 172.26.188.25
        Export ceph block device nfsdev to 172.26.188.25
    $0 unexport nfsdev 172.26.188.25
        Unexport ceph block device nfsdev to 172.26.188.25
EOF
}


